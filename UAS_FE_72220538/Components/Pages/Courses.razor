@page "/course"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using UAS_FE_72220538.Model

<h3>Daftar Kursus</h3>
<PageTitle>Course</PageTitle>

<div class="search-bar">
    <input type="text" @bind="searchTerm" class="search-input" placeholder="Cari berdasarkan nama kursus..." />
    <button @onclick="SearchCourses" class="search-button">Cari</button>
</div>

<button @onclick="@(() => CreateCourse())" class="add-course-button">Tambah Kursus</button>

@if (filteredCourses == null)
{
    <p>Loading...</p>
}
else if (!filteredCourses.Any())
{
    <p class="no-results">Tidak ada kursus yang ditemukan.</p>
}
else
{
    <div class="course-container">
        @foreach (var course in filteredCourses)
        {
            <div class="course-card">
                <img src="@course.imageName" alt="@course.name" class="course-image" />
                <div class="course-details">
                    <h4 class="course-title">@course.name</h4>
                    <p class="course-description">@course.description</p>
                    <p class="course-duration"><strong>Durasi:</strong> @course.duration jam</p>
                    <span class="course-category">@course.category.name</span>
                    <div class="course-actions">
                        <button class="edit-button" @onclick="@(() => EditCourse(course.courseId))">Edit</button>
                        <button class="delete-button" @onclick="@(() => DeleteCourse(course.courseId))">Hapus</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<course> courses = new(); // Original courses fetched
    private List<course> filteredCourses = new(); // Courses displayed based on search
    private string searchTerm = string.Empty; // User's search input

    private void CreateCourse()
    {
        NavigationManager.NavigateTo("/courses/new");
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch initial courses using HttpClient
        courses = await HttpClient.GetFromJsonAsync<List<course>>("https://actbackendseervices.azurewebsites.net/api/courses");
        filteredCourses = courses; // Initialize displayed courses
    }

    private void EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"/courses/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        // Delete the course via HttpClient
        await HttpClient.DeleteAsync($"https://actbackendseervices.azurewebsites.net/api/courses/{courseId}");

        // Refresh course list
        courses = await HttpClient.GetFromJsonAsync<List<course>>("https://actbackendseervices.azurewebsites.net/api/courses");
        filteredCourses = courses; // Reset to all courses
    }

    private void SearchCourses()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // If search term is empty, reset to all courses
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses.Where(course =>
                course.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                course.category.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
}



<style>
    .course-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    padding: 2rem; /* Use rem for padding */
}

.course-card {
    width: 18rem; /* Set a fixed width for cards */
    margin: 1.5rem; /* Margin between cards */
    border: 0.1rem solid #ccc; /* Light border */
    border-radius: 0.5rem; /* Rounded corners */
    box-shadow: 0 0.4rem 0.8rem rgba(0, 0, 0, 0.1); /* Subtle shadow */
    overflow: hidden; /* Clip content */
    display: flex;
    flex-direction: column; /* Ensure vertical layout */
    transition: transform 0.2s; /* Smooth hover effect */
}

.course-card:hover {
    transform: scale(1.05); /* Slightly enlarge on hover */
}

.card-img-top {
    width: 100%; /* Make image fill the card */
    height: 12rem; /* Set a fixed height */
    object-fit: cover; /* Cover the area without stretching */
}

.card-body {
    padding: 1.5rem; /* Padding for body */
    flex: 1; /* Allow the card body to expand and fill space */
    display: flex;
    flex-direction: column; /* Ensure vertical layout */
}

.card-title {
    font-size: 1.5rem; /* Increase title size */
    margin: 0; /* Remove default margin */
    color: #333; /* Darker color for the title */
    max-height: 3rem; /* Set max height for title */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    white-space: nowrap; /* Prevent title from wrapping */
}

.card-text {
    color: #555; /* Lighter text color */
    margin: 0.5rem 0; /* Add margin */
    flex: 1; /* Allow text to expand and fill space */
    max-height: 5rem; /* Set max height for description */
    overflow-y: auto; /* Enable vertical scrolling */
}

    .card-actions {
        display: flex;
        justify-content: center; /* Center the buttons */
        margin-top: 1rem; /* Add some margin on top */
        padding: 0.5rem 0; /* Add vertical padding for spacing */
    }

    .btn {
        margin: 0 0.5rem; /* Add horizontal spacing between buttons */
        min-width: 8rem; /* Minimum width for buttons to prevent shrinking */
        height: 3rem; /* Set a fixed height for buttons */
        text-align: center; /* Center text in buttons */
    }



.badge {
    margin: 1rem 0; /* Add margin to the badge */
    font-size: 0.9rem; /* Smaller badge text */
}

    h3 {
        font-size: 2rem;
        color: #333;
        text-align: center;
        margin-bottom: 1rem;
        font-family: 'Arial', sans-serif;
    }

    /* Search Bar */
    .search-bar {
        display: flex;
        justify-content: center;
        margin-bottom: 16px;
    }

    .search-input {
        width: 60%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 6px 0 0 6px;
        font-size: 16px;
        outline: none;
    }

    .search-button {
        padding: 12px 20px;
        border: none;
        background-color: #007BFF;
        color: white;
        font-size: 16px;
        border-radius: 0 6px 6px 0;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .search-button:hover {
            background-color: #0056b3;
        }

    /* Add Course Button */
    .add-course-button {
        display: block;
        margin: 0 auto 20px auto;
        padding: 12px 24px;
        background-color: #28A745;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .add-course-button:hover {
            background-color: #218838;
        }

    /* Course Container */
    .course-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 16px;
        padding: 16px;
    }

    /* Course Card */
    .course-card {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

    .course-image {
        width: 100%;
        height: 180px;
        object-fit: cover;
    }

    .course-details {
        padding: 16px;
    }

    .course-title {
        font-size: 1.25rem;
        margin-bottom: 8px;
        color: #333;
    }

    .course-description {
        font-size: 1rem;
        color: #666;
        margin-bottom: 12px;
    }

    .course-duration {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 8px;
    }

    .course-category {
        display: inline-block;
        background-color: #007BFF;
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9rem;
        margin-bottom: 12px;
    }

    .course-actions {
        display: flex;
        justify-content: space-between;
    }

    .edit-button, .delete-button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .edit-button {
        background-color: #ffc107;
        color: white;
    }

        .edit-button:hover {
            background-color: #e0a800;
        }

    .delete-button {
        background-color: #dc3545;
        color: white;
    }

        .delete-button:hover {
            background-color: #c82333;
        }

    /* No Results */
    .no-results {
        text-align: center;
        font-size: 1.2rem;
        color: #777;
    }
</style>
