@page "/course"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using UAS_FE_72220538.Model
<h3>Daftar Course</h3>
<PageTitle>Course</PageTitle>
<div style="display: flex; align-items: center; margin-bottom: 16px;">
    <input type="text" @bind="searchTerm" class="form-control" @bind="searchTerm" placeholder="Cari berdasarkan nama course..."/>
    <button @onclick="SearchCourses" style="margin-left: 8px; background-color: blue; color: white; padding: 8px 12px; border: none; cursor: pointer; border-radius: 6px;">
        Find
    </button>
</div>
@* <div class="mb-3 input-group"> *@
@*     <input type="text" *@
@*            class="form-control" *@
@*            placeholder="Search by course name" *@
@*            @bind="searchTerm" /> *@
@*     <button class="btn btn-primary" @onclick="SearchCourses"> *@
@*         Cari *@
@*     </button> *@
@* </div> *@
<button @onclick="@(() => CreateCourse())"
        style="margin-bottom: 16px; background-color: green; color: white; padding: 8px 12px; border: none; cursor: pointer; border-radius: 8px;">
    Tambah Course
</button>

@if (filteredCourses == null)
{
    <p>Loading...</p>
}
else if (!filteredCourses.Any())
{
    <p>Tidak ada course yang ditemukan.</p>
}
else
{
    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 16px;">
        @foreach (var course in filteredCourses)
        {
            <div class="course-list">
                <div class="card course-card">
                    <img src="@course.imageName" alt="@course.name" class="card-img-top" />
                    <div class="card-body">
                        <h5 class="card-title">@course.name</h5>
                        <p class="card-text">@course.description</p>
                        <p><strong>Duration:</strong> @course.duration hours</p>
                        <span class="badge bg-primary">@course.category.name</span>
                        <div class="card-actions">
                            <button class="btn btn-edit btn-primary" @onclick="@(() => EditCourse(course.courseId))">Edit</button>
                            <button class="btn btn-delete btn-danger" @onclick="@(() => DeleteCourse(course.courseId))">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
@code {
    private List<course> courses = new(); // Original courses fetched
    private List<course> filteredCourses = new(); // Courses displayed based on search
    private string searchTerm = string.Empty; // User's search input

    private void CreateCourse()
    {
        NavigationManager.NavigateTo("/courses/new");
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch initial courses using HttpClient
        courses = await HttpClient.GetFromJsonAsync<List<course>>("https://actbackendseervices.azurewebsites.net/api/courses");
        filteredCourses = courses; // Initialize displayed courses
    }

    private void EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"/courses/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        // Delete the course via HttpClient
        await HttpClient.DeleteAsync($"https://actbackendseervices.azurewebsites.net/api/courses/{courseId}");

        // Refresh course list
        courses = await HttpClient.GetFromJsonAsync<List<course>>("https://actbackendseervices.azurewebsites.net/api/courses");
        filteredCourses = courses; // Reset to all courses
    }

    private void SearchCourses()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // If search term is empty, reset to all courses
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses.Where(course =>
                course.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                course.category.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
}



<style>
    .course-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    padding: 2rem; /* Use rem for padding */
}

.course-card {
    width: 18rem; /* Set a fixed width for cards */
    margin: 1.5rem; /* Margin between cards */
    border: 0.1rem solid #ccc; /* Light border */
    border-radius: 0.5rem; /* Rounded corners */
    box-shadow: 0 0.4rem 0.8rem rgba(0, 0, 0, 0.1); /* Subtle shadow */
    overflow: hidden; /* Clip content */
    display: flex;
    flex-direction: column; /* Ensure vertical layout */
    transition: transform 0.2s; /* Smooth hover effect */
}

.course-card:hover {
    transform: scale(1.05); /* Slightly enlarge on hover */
}

.card-img-top {
    width: 100%; /* Make image fill the card */
    height: 12rem; /* Set a fixed height */
    object-fit: cover; /* Cover the area without stretching */
}

.card-body {
    padding: 1.5rem; /* Padding for body */
    flex: 1; /* Allow the card body to expand and fill space */
    display: flex;
    flex-direction: column; /* Ensure vertical layout */
}

.card-title {
    font-size: 1.5rem; /* Increase title size */
    margin: 0; /* Remove default margin */
    color: #333; /* Darker color for the title */
    max-height: 3rem; /* Set max height for title */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    white-space: nowrap; /* Prevent title from wrapping */
}

.card-text {
    color: #555; /* Lighter text color */
    margin: 0.5rem 0; /* Add margin */
    flex: 1; /* Allow text to expand and fill space */
    max-height: 5rem; /* Set max height for description */
    overflow-y: auto; /* Enable vertical scrolling */
}

    .card-actions {
        display: flex;
        justify-content: center; /* Center the buttons */
        margin-top: 1rem; /* Add some margin on top */
        padding: 0.5rem 0; /* Add vertical padding for spacing */
    }

    .btn {
        margin: 0 0.5rem; /* Add horizontal spacing between buttons */
        min-width: 8rem; /* Minimum width for buttons to prevent shrinking */
        height: 3rem; /* Set a fixed height for buttons */
        text-align: center; /* Center text in buttons */
    }



.badge {
    margin: 1rem 0; /* Add margin to the badge */
    font-size: 0.9rem; /* Smaller badge text */
}

    h3 {
        font-size: 2rem; /* Increase font size */
        color: #333; /* Darker color for better contrast */
        margin-bottom: 1rem; /* Space below the header */
        text-align: center; /* Center the header */
        font-family: 'Arial', sans-serif; /* Use a modern font */
    }

    .btn-new {
        display: block; /* Make the button block level for full width */
        width: 100%; /* Full width of the container */
        max-width: 15rem; /* Set a maximum width for the button */
        margin: 0 auto; /* Center the button */
        padding: 0.75rem 1.5rem; /* Adjust padding for more space */
        font-size: 1.2rem; /* Increase font size */
        border-radius: 0.5rem; /* Rounded corners */
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    .input-group .form-control {
        flex: 1; /* Make input fill the remaining space */
        margin-right: 0.5rem; /* Add spacing between input and button */
    }

    .input-group .btn {
        height: 100%; /* Match the button's height to the input */
        padding: 0.5rem 1rem; /* Adjust padding */
        font-size: 1rem; /* Ensure readable text */
    }
</style>
